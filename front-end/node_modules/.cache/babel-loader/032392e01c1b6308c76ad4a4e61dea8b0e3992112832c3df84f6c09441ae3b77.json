{"ast":null,"code":"import { createStore } from 'vuex';\n// Create a new store instance.\nconst store = createStore({\n  state() {\n    return {\n      workouts: null,\n      user: localStorage.getItem('user'),\n      error: null,\n      isError: false,\n      todos: [],\n      todo: null\n    };\n  },\n  mutations: {\n    todo(state) {\n      if (localStorage.getItem('todo')) {\n        try {\n          state.todo = JSON.parse(localStorage.getItem('todo'));\n        } catch (e) {\n          localStorage.removeItem('todo');\n        }\n      }\n    },\n    addtodo(state) {\n      // ensure they actually typed something\n      if (!state.todo) {\n        return;\n      }\n      state.todo.push(state.todo);\n      state.todos = '';\n      const parsed = JSON.stringify(state.todo);\n      localStorage.setItem('todo', parsed);\n    },\n    updatetodo(state, x) {\n      state.todo.splice(x, 2);\n      const parsed = JSON.stringify(state.todo);\n      localStorage.setItem('todo', parsed);\n    },\n    removetodo(state, x) {\n      state.todo.splice(x, 1);\n      const parsed = JSON.stringify(state.todo);\n      localStorage.setItem('todo', parsed);\n    },\n    savetodo(state) {\n      const parsed = JSON.stringify(state.todo);\n      localStorage.setItem('todo', parsed);\n    }\n  },\n  actions: {\n    todo(context) {\n      context.commit('todo');\n    },\n    addtodo(context) {\n      context.commit('addtodo');\n    },\n    removetodo(context) {\n      context.commit('removetodo');\n    },\n    savetodo(context) {\n      context.commit('savetodo');\n    }\n  }\n});\nexport default store;\n\n// eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzZGRmMjljMTNjOTlhYmJkZmExNGZjMSIsImlhdCI6MTY3NjEzMTM2OCwiZXhwIjoxNjc2MzkwNTY4fQ.psQltWPNnKtGUgF3-q7jXFVSPyMHLqmpE7NqIUDFPs8","map":{"version":3,"names":["createStore","store","state","workouts","user","localStorage","getItem","error","isError","todos","todo","mutations","JSON","parse","e","removeItem","addtodo","push","parsed","stringify","setItem","updatetodo","x","splice","removetodo","savetodo","actions","context","commit"],"sources":["/home/amirrezatahmasebi/Documents/node-js/front-end/store/store.js"],"sourcesContent":["import { createStore } from 'vuex'\n// Create a new store instance.\nconst store = createStore({\n    state() {\n        return {\n            workouts: null,\n            user: localStorage.getItem('user'),\n            error: null,\n            isError: false,\n            todos: [],\n            todo: null\n        }\n    },\n    mutations: {\n        todo(state) {\n            if (localStorage.getItem('todo')) {\n                try {\n                    state.todo = JSON.parse(localStorage.getItem('todo'));\n                } catch (e) {\n                    localStorage.removeItem('todo');\n                }\n            }\n        },\n        addtodo(state) {\n            // ensure they actually typed something\n            if (!state.todo) {\n                return;\n            }\n\n            state.todo.push(state.todo);\n            state.todos = '';\n            const parsed = JSON.stringify(state.todo);\n            localStorage.setItem('todo', parsed);\n        },\n        updatetodo(state, x) {\n            state.todo.splice(x, 2);\n            const parsed = JSON.stringify(state.todo);\n            localStorage.setItem('todo', parsed);\n        },\n        removetodo(state, x) {\n            state.todo.splice(x, 1);\n            const parsed = JSON.stringify(state.todo);\n            localStorage.setItem('todo', parsed);\n        },\n        savetodo(state) {\n            const parsed = JSON.stringify(state.todo);\n            localStorage.setItem('todo', parsed);\n        }\n    },\n    actions: {\n        todo(context) {\n            context.commit('todo')\n        },\n        addtodo(context) {\n            context.commit('addtodo')\n        },\n        removetodo(context) {\n            context.commit('removetodo')\n        },\n        savetodo(context) {\n            context.commit('savetodo')\n        }\n    }\n})\nexport default store;\n\n// eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYzZGRmMjljMTNjOTlhYmJkZmExNGZjMSIsImlhdCI6MTY3NjEzMTM2OCwiZXhwIjoxNjc2MzkwNTY4fQ.psQltWPNnKtGUgF3-q7jXFVSPyMHLqmpE7NqIUDFPs8"],"mappings":"AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC;AACA,MAAMC,KAAK,GAAGD,WAAW,CAAC;EACtBE,KAAK,GAAG;IACJ,OAAO;MACHC,QAAQ,EAAE,IAAI;MACdC,IAAI,EAAEC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MAClCC,KAAK,EAAE,IAAI;MACXC,OAAO,EAAE,KAAK;MACdC,KAAK,EAAE,EAAE;MACTC,IAAI,EAAE;IACV,CAAC;EACL,CAAC;EACDC,SAAS,EAAE;IACPD,IAAI,CAACR,KAAK,EAAE;MACR,IAAIG,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,EAAE;QAC9B,IAAI;UACAJ,KAAK,CAACQ,IAAI,GAAGE,IAAI,CAACC,KAAK,CAACR,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;QACzD,CAAC,CAAC,OAAOQ,CAAC,EAAE;UACRT,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;QACnC;MACJ;IACJ,CAAC;IACDC,OAAO,CAACd,KAAK,EAAE;MACX;MACA,IAAI,CAACA,KAAK,CAACQ,IAAI,EAAE;QACb;MACJ;MAEAR,KAAK,CAACQ,IAAI,CAACO,IAAI,CAACf,KAAK,CAACQ,IAAI,CAAC;MAC3BR,KAAK,CAACO,KAAK,GAAG,EAAE;MAChB,MAAMS,MAAM,GAAGN,IAAI,CAACO,SAAS,CAACjB,KAAK,CAACQ,IAAI,CAAC;MACzCL,YAAY,CAACe,OAAO,CAAC,MAAM,EAAEF,MAAM,CAAC;IACxC,CAAC;IACDG,UAAU,CAACnB,KAAK,EAAEoB,CAAC,EAAE;MACjBpB,KAAK,CAACQ,IAAI,CAACa,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;MACvB,MAAMJ,MAAM,GAAGN,IAAI,CAACO,SAAS,CAACjB,KAAK,CAACQ,IAAI,CAAC;MACzCL,YAAY,CAACe,OAAO,CAAC,MAAM,EAAEF,MAAM,CAAC;IACxC,CAAC;IACDM,UAAU,CAACtB,KAAK,EAAEoB,CAAC,EAAE;MACjBpB,KAAK,CAACQ,IAAI,CAACa,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;MACvB,MAAMJ,MAAM,GAAGN,IAAI,CAACO,SAAS,CAACjB,KAAK,CAACQ,IAAI,CAAC;MACzCL,YAAY,CAACe,OAAO,CAAC,MAAM,EAAEF,MAAM,CAAC;IACxC,CAAC;IACDO,QAAQ,CAACvB,KAAK,EAAE;MACZ,MAAMgB,MAAM,GAAGN,IAAI,CAACO,SAAS,CAACjB,KAAK,CAACQ,IAAI,CAAC;MACzCL,YAAY,CAACe,OAAO,CAAC,MAAM,EAAEF,MAAM,CAAC;IACxC;EACJ,CAAC;EACDQ,OAAO,EAAE;IACLhB,IAAI,CAACiB,OAAO,EAAE;MACVA,OAAO,CAACC,MAAM,CAAC,MAAM,CAAC;IAC1B,CAAC;IACDZ,OAAO,CAACW,OAAO,EAAE;MACbA,OAAO,CAACC,MAAM,CAAC,SAAS,CAAC;IAC7B,CAAC;IACDJ,UAAU,CAACG,OAAO,EAAE;MAChBA,OAAO,CAACC,MAAM,CAAC,YAAY,CAAC;IAChC,CAAC;IACDH,QAAQ,CAACE,OAAO,EAAE;MACdA,OAAO,CAACC,MAAM,CAAC,UAAU,CAAC;IAC9B;EACJ;AACJ,CAAC,CAAC;AACF,eAAe3B,KAAK;;AAEpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}