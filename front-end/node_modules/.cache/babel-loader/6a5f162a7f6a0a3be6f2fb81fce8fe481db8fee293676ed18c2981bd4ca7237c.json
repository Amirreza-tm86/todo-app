{"ast":null,"code":"const mongoose = require('mongoose');\nconst bcrypt = require('bcrypt');\nconst validator = require('validator');\nconst Schema = mongoose.Schema;\nconst userlogin = new Schema({\n  email: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  password: {\n    type: String,\n    required: true\n  }\n}, {\n  timestamps: true,\n  collection: 'user'\n});\nuserlogin.statics.signup = async function (email, password) {\n  const exists = await this.findOne({\n    email\n  });\n  if (!email || !password) {\n    throw Error('please complate the password an email');\n  }\n  if (!validator.isEmail(email)) {\n    throw Error('email is not enough');\n  }\n  if (!validator.isStrongPassword(password)) {\n    throw Error('password is not strong');\n  }\n  if (exists) {\n    throw Error('Email already in use');\n  }\n  const salt = await bcrypt.genSalt(10);\n  const hash = await bcrypt.hash(password, salt);\n  const user = await this.create({\n    email,\n    password: hash\n  });\n  return user;\n};\nuserlogin.statics.login = async function (email, password) {\n  if (!email || !password) {\n    throw Error('please complate the password an email');\n  }\n  const user = await this.findOne({\n    email\n  });\n  if (!user) {\n    throw Error('inccourect email');\n  }\n  const match = await bcrypt.compare(password, user.password);\n  if (!match) {\n    throw Error('incourrect password');\n  }\n  return user;\n};\nmodule.exports = mongoose.model('user', userlogin);","map":{"version":3,"names":["mongoose","require","bcrypt","validator","Schema","userlogin","email","type","String","required","unique","password","timestamps","collection","statics","signup","exists","findOne","Error","isEmail","isStrongPassword","salt","genSalt","hash","user","create","login","match","compare","module","exports","model"],"sources":["/home/amirrezatahmasebi/Documents/node-js/backend/models/userlogin.js"],"sourcesContent":["const mongoose = require('mongoose')\nconst bcrypt = require('bcrypt')\nconst validator = require('validator')\n\nconst Schema = mongoose.Schema\n\nconst userlogin = new Schema({\n    email: {\n        type: String,\n        required: true,\n        unique: true\n    },\n    password: {\n        type: String,\n        required: true\n    }\n}, { timestamps: true, collection: 'user' })\n\nuserlogin.statics.signup = async function (email, password) {\n    const exists = await this.findOne({ email })\n\n    if (!email || !password) {\n        throw Error('please complate the password an email')\n    }\n\n    if (!validator.isEmail(email)) {\n        throw Error('email is not enough')\n    }\n\n    if (!validator.isStrongPassword(password)) {\n        throw Error('password is not strong')\n    }\n\n    if (exists) {\n        throw Error('Email already in use')\n    }\n    const salt = await bcrypt.genSalt(10)\n    const hash = await bcrypt.hash(password, salt)\n\n    const user = await this.create({ email, password: hash })\n\n    return user\n}\n\nuserlogin.statics.login = async function (email, password) {\n\n    if (!email || !password) {\n        throw Error('please complate the password an email')\n    }\n    const user = await this.findOne({ email })\n\n    if (!user) {\n        throw Error('inccourect email')\n    }\n\n    const match = await bcrypt.compare(password, user.password)\n\n    if (!match) {\n        throw Error('incourrect password')\n    }\n\n    return user\n\n}\n\nmodule.exports = mongoose.model('user', userlogin)"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAME,SAAS,GAAGF,OAAO,CAAC,WAAW,CAAC;AAEtC,MAAMG,MAAM,GAAGJ,QAAQ,CAACI,MAAM;AAE9B,MAAMC,SAAS,GAAG,IAAID,MAAM,CAAC;EACzBE,KAAK,EAAE;IACHC,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE,IAAI;IACdC,MAAM,EAAE;EACZ,CAAC;EACDC,QAAQ,EAAE;IACNJ,IAAI,EAAEC,MAAM;IACZC,QAAQ,EAAE;EACd;AACJ,CAAC,EAAE;EAAEG,UAAU,EAAE,IAAI;EAAEC,UAAU,EAAE;AAAO,CAAC,CAAC;AAE5CR,SAAS,CAACS,OAAO,CAACC,MAAM,GAAG,gBAAgBT,KAAK,EAAEK,QAAQ,EAAE;EACxD,MAAMK,MAAM,GAAG,MAAM,IAAI,CAACC,OAAO,CAAC;IAAEX;EAAM,CAAC,CAAC;EAE5C,IAAI,CAACA,KAAK,IAAI,CAACK,QAAQ,EAAE;IACrB,MAAMO,KAAK,CAAC,uCAAuC,CAAC;EACxD;EAEA,IAAI,CAACf,SAAS,CAACgB,OAAO,CAACb,KAAK,CAAC,EAAE;IAC3B,MAAMY,KAAK,CAAC,qBAAqB,CAAC;EACtC;EAEA,IAAI,CAACf,SAAS,CAACiB,gBAAgB,CAACT,QAAQ,CAAC,EAAE;IACvC,MAAMO,KAAK,CAAC,wBAAwB,CAAC;EACzC;EAEA,IAAIF,MAAM,EAAE;IACR,MAAME,KAAK,CAAC,sBAAsB,CAAC;EACvC;EACA,MAAMG,IAAI,GAAG,MAAMnB,MAAM,CAACoB,OAAO,CAAC,EAAE,CAAC;EACrC,MAAMC,IAAI,GAAG,MAAMrB,MAAM,CAACqB,IAAI,CAACZ,QAAQ,EAAEU,IAAI,CAAC;EAE9C,MAAMG,IAAI,GAAG,MAAM,IAAI,CAACC,MAAM,CAAC;IAAEnB,KAAK;IAAEK,QAAQ,EAAEY;EAAK,CAAC,CAAC;EAEzD,OAAOC,IAAI;AACf,CAAC;AAEDnB,SAAS,CAACS,OAAO,CAACY,KAAK,GAAG,gBAAgBpB,KAAK,EAAEK,QAAQ,EAAE;EAEvD,IAAI,CAACL,KAAK,IAAI,CAACK,QAAQ,EAAE;IACrB,MAAMO,KAAK,CAAC,uCAAuC,CAAC;EACxD;EACA,MAAMM,IAAI,GAAG,MAAM,IAAI,CAACP,OAAO,CAAC;IAAEX;EAAM,CAAC,CAAC;EAE1C,IAAI,CAACkB,IAAI,EAAE;IACP,MAAMN,KAAK,CAAC,kBAAkB,CAAC;EACnC;EAEA,MAAMS,KAAK,GAAG,MAAMzB,MAAM,CAAC0B,OAAO,CAACjB,QAAQ,EAAEa,IAAI,CAACb,QAAQ,CAAC;EAE3D,IAAI,CAACgB,KAAK,EAAE;IACR,MAAMT,KAAK,CAAC,qBAAqB,CAAC;EACtC;EAEA,OAAOM,IAAI;AAEf,CAAC;AAEDK,MAAM,CAACC,OAAO,GAAG9B,QAAQ,CAAC+B,KAAK,CAAC,MAAM,EAAE1B,SAAS,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}