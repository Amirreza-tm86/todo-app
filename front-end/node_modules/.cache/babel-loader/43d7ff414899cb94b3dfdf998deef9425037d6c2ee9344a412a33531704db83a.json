{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, Fragment as _Fragment, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-8dc7cce2\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"text-task\"\n}, [/*#__PURE__*/_createElementVNode(\"h3\", null, \"My Task:\")], -1 /* HOISTED */));\nconst _hoisted_2 = {\n  class: \"flex\"\n};\nconst _hoisted_3 = {\n  id: \"todo\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createCommentVNode(\" <div class=\\\"between-flex\\\" v-for=\\\"items in store.state.workouts\\\"> \"), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"input\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.middle && $options.middle(...args)),\n    id: \"myCheck\",\n    type: \"checkbox\"\n  }), _createElementVNode(\"p\", _hoisted_3, _toDisplayString($data.getItem), 1 /* TEXT */)]), _createElementVNode(\"div\", null, [_createElementVNode(\"button\", {\n    class: \"btn-del\",\n    onClick: _cache[1] || (_cache[1] = $event => $options.handlerDelete(_ctx.items._id))\n  }, \"Delete\"), _createElementVNode(\"button\", {\n    class: \"btn-upd\",\n    onClick: _cache[2] || (_cache[2] = $event => ($options.handlerUpdate(_ctx.items._id), $options.showinput))\n  }, \"Update\")]), _createCommentVNode(\" </div> \"), $data.showinp ? _withDirectives((_openBlock(), _createElementBlock(\"input\", {\n    key: 0,\n    ref: \"inp\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.updates = $event),\n    type: \"text\"\n  }, null, 512 /* NEED_PATCH */)), [[_vModelText, $data.updates]]) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;gEACIA,oBAEM;EAFDC,KAAK,EAAC;AAAW,iBAClBD,oBAAiB,YAAb,UAAQ;;EAGPC,KAAK,EAAC;AAAM;;EAEVC,EAAE,EAAC;AAAM;;6DANpBC,UAEM,EACNC,6FAAyE,EACrEJ,oBAGM,OAHNK,UAGM,GAFFL,oBAAoD;IAA5CM,OAAK,yCAAEC,2CAAM;IAAEL,EAAE,EAAC,SAAS;IAACM,IAAI,EAAC;MACzCR,oBAA8B,KAA9BS,UAA8B,mBAAdC,aAAO,oBAE3BV,oBAGM,cAFFA,oBAAyE;IAAjEC,KAAK,EAAC,SAAS;IAAEK,OAAK,sCAAEC,sBAAa,CAACI,UAAK,CAACC,GAAG;KAAG,QAAM,GAChEZ,oBAAoF;IAA5EC,KAAK,EAAC,SAAS;IAAEK,OAAK,uCAAEC,sBAAa,CAACI,UAAK,CAACC,GAAG,GAAGL,kBAAS;KAAE,QAAM,KAEnFH,+BAAe,EACFM,aAAO,kCAApBG,oBAAgE;;IAA1CC,GAAG,EAAC,KAAK;+DAAUJ,aAAO;IAAEF,IAAI,EAAC;kDAAdE,aAAO","names":["_createElementVNode","class","id","_hoisted_1","_createCommentVNode","_hoisted_2","onClick","$options","type","_hoisted_3","$data","_ctx","_id","_createElementBlock","ref"],"sourceRoot":"","sources":["/home/amirrezatahmasebi/Documents/node-js/front-end/src/components/Home.vue"],"sourcesContent":["<template>\n    <div class=\"text-task\">\n        <h3>My Task:</h3>\n    </div>\n    <!-- <div class=\"between-flex\" v-for=\"items in store.state.workouts\"> -->\n        <div class=\"flex\">\n            <input @click=\"middle\" id=\"myCheck\" type=\"checkbox\">\n            <p id=\"todo\">{{ getItem }}</p>\n        </div>\n        <div>\n            <button class=\"btn-del\" @click=\"handlerDelete(items._id)\">Delete</button>\n            <button class=\"btn-upd\" @click=\"handlerUpdate(items._id), showinput\">Update</button>\n        </div>\n    <!-- </div> -->\n    <input v-if=\"showinp\" ref=\"inp\" v-model=\"updates\" type=\"text\" />\n</template>\n\n<script>\n// import formatDistanceToNow from 'date-fns/formatDistanceToNow'\nimport axios from 'axios'\nimport { useStore } from 'vuex'\nimport workoutFormVue from './workoutForm.vue'\nexport default {\n    name: 'navVue',\n    components: {\n        workoutFormVue\n    },\n    data() {\n        const store = useStore()\n        const showinp = false\n        const updates = null\n        const getItem = localStorage.getItem(JSON.stringify('todo'))\n        // let timecreate = ref(formatDistanceToNow(new Date(store.state.date), { addSuffix: true }))\n        if (localStorage.getItem('user')) {\n            // localStorage.getItem('todo')\n            // axios.get('/books', {\n            //     headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\n            // })\n            //     .then(response => {\n            //         this.store.state.workouts = response.data\n            //     })\n        }\n        return {\n            store,\n            showinp,\n            updates,\n            getItem\n            // timecreate\n        }\n    },\n    methods: {\n        handlerDelete: function (id) {\n            if (localStorage.getItem('user')) {\n\n                axios.delete(`/books/${id}`, {\n                    headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\n                })\n                    .then((res) => {\n                        axios.get('/books', {\n                            headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` },\n                        })\n                            .then(response => {\n                                this.store.state.workouts = response.data\n                            })\n                    })\n                    .catch((err) => console.log(err))\n            }\n        },\n        handlerUpdate: function (id) {\n            this.showinp = !this.showinp\n            if (localStorage.getItem('user')) {\n\n                if (this.updates !== null) {\n                    axios.patch(`/books/${id}`, {\n                        Todo: this.updates,\n                        headers: { 'Authorization': `Bearer ${this.store.state.result}` },\n\n                    })\n                        .then((res) => {\n                            axios.get('/books')\n                                .then(response => {\n                                    this.store.state.workouts = response.data\n                                })\n                            this.showinp = false\n                            this.updates = null\n                        })\n                        .catch((err) => console.log(err));\n                }\n            }\n        },\n        showinput: function () {\n            return this.showinp = !this.showinp\n        },\n        middle: function () {\n            const list = document.getElementById(\"todo\");\n            for (var i = 0; i < list.length; ++i) {\n                list[i].classList.toggle('checked');\n            }\n        }\n    }\n}\n</script>\n\n<style scoped>\n@import url('../Style/style.css');\n\n.flex {\n    display: flex;\n}\n\nspan {\n    font-size: 11px;\n    color: black;\n}\n\ninput[type=checkbox]:checked+p {\n    text-decoration: line-through;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}